# Module extenstion to support arrays in POSIX shell
# REQUIRE : base

# Initialize array
# Args:
# $1 - array name
ar_init() {
    set_val "KEYS_$1" '""'
    set_val "LAST_FREE_KEY_$1" "0"
}

ar_foreach() {
    for key in `val KEYS_$1` ; do
        local v="`val $1_VALUE_$key`"
        eval $2 \"$v\" $key
    done
}

# Check is array element is set
# Args:
# $1 - array name
# $2 - key
ar_is_set() {
    for key in `val KEYS_$1` ; do
        if [ "$key" = "$2" ] ; then
            return 0
        fi
    done
    return 1
}

# Generate new key for array and store it to variable LAST_KEY_${ARNAME}
# Args:
# $1 - array name
# $2 - event type (append or remove)
# $3 - removed or appended key
ar_update_key() {
    local event="append"
    if [ $2 != "" ] ; then
        event=$2
    fi
    if [ "$event" = "append" ] ; then
        if [ "$3" -eq "$3" ] 2>/dev/null;  then 
            v=`val LAST_FREE_KEY_$1`
            v=$(($v+1))
            while ar_is_set $1 $v ; do
                v=$(($v+1))
            done
            set_val LAST_FREE_KEY_$1 $v
        fi
        return 0
    fi
    
    if [ "$3" -eq "$3" ] 2>/dev/null;  then 
        cv=`val LAST_FREE_KEY_$1`
        if [ "$3" -lt "$cv" ] ; then
            set_val LAST_FREE_KEY_$1 $3
        fi
        return 0
    fi
}

ar_update() {
    local ar_update_name="$1"
    local ar_update_key="$2"
    local ar_update_value="$3"
    if [ "$3" = "" ] ; then
        local value="$2"
        local key=`val LAST_FREE_KEY_$1`
    fi
    set_val "KEYS_$1" "`val "KEYS_$1"` $key"
    
    set_val "$1_VALUE_$key" "$value"
    ar_update_key $1 "append" $key
}

# Remove array element by index
# Args:
# $1 - array name
# $2 - element index
ar_remove() {
    local keys=`val KEYS_$1`
    local new_keys=''
    for k in $keys ; do
        if [ "$k" != "$2" ] ; then
            new_keys="$new_keys $k"
        fi
    done
    set_val KEYS_$1 "$new_keys"
    ar_update_key "test" "remove" $2
    unset "$1_VALUE_$2"
}

ar_keys() {
    val KEYS_$1
}

# Get array value
# Args:
#  $1 - array name
#  $2 - key
ar_val() {
    val $1_VALUE_$2
}

ar_clear() {
    for key in `val "KEYS_$1"` ; do
        unset $1_VALUE_$key
    done
    set_val KEYS_$1 ""
}

# Common function for editable and readonly arrays
# Args:
# $1 - array name
# $2 - array func
foreach() {
    if [ "`val KEYS_$1`" = "" ] ; then
        eval foreach_$1 \"$2\"
    else
        ar_foreach $1 $2
    fi
}

counter_incrementor() {
    COUNTER=$(($COUNTER+1))
}

# Common function for editable and readonly arrays
# Args:
# $1 - array name
array_length() {
    COUNTER=0
    if [ "`val KEYS_$1`" = "" ] ; then
        eval foreach_$1 "counter_incrementor"
    else
        ar_foreach $1 "counter_incrementor"
    fi
    echo $COUNTER
}


